package com.system.translationpen.daomaster;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.system.translationpen.exchangerate.bean.FirstPageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIRST_PAGE_BEAN".
*/
public class FirstPageBeanDao extends AbstractDao<FirstPageBean, Long> {

    public static final String TABLENAME = "FIRST_PAGE_BEAN";

    /**
     * Properties of entity FirstPageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Position = new Property(1, int.class, "position", false, "POSITION");
        public final static Property Curno = new Property(2, String.class, "Curno", false, "CURNO");
        public final static Property SsRote = new Property(3, String.class, "ssRote", false, "SS_ROTE");
        public final static Property Middle = new Property(4, String.class, "middle", false, "MIDDLE");
    }


    public FirstPageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FirstPageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIRST_PAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POSITION\" INTEGER NOT NULL ," + // 1: position
                "\"CURNO\" TEXT," + // 2: Curno
                "\"SS_ROTE\" TEXT," + // 3: ssRote
                "\"MIDDLE\" TEXT);"); // 4: middle
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIRST_PAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FirstPageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPosition());
 
        String Curno = entity.getCurno();
        if (Curno != null) {
            stmt.bindString(3, Curno);
        }
 
        String ssRote = entity.getSsRote();
        if (ssRote != null) {
            stmt.bindString(4, ssRote);
        }
 
        String middle = entity.getMiddle();
        if (middle != null) {
            stmt.bindString(5, middle);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FirstPageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPosition());
 
        String Curno = entity.getCurno();
        if (Curno != null) {
            stmt.bindString(3, Curno);
        }
 
        String ssRote = entity.getSsRote();
        if (ssRote != null) {
            stmt.bindString(4, ssRote);
        }
 
        String middle = entity.getMiddle();
        if (middle != null) {
            stmt.bindString(5, middle);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FirstPageBean readEntity(Cursor cursor, int offset) {
        FirstPageBean entity = new FirstPageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // position
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Curno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ssRote
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // middle
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FirstPageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition(cursor.getInt(offset + 1));
        entity.setCurno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSsRote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMiddle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FirstPageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FirstPageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FirstPageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

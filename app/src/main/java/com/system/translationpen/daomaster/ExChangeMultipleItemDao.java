package com.system.translationpen.daomaster;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.system.translationpen.exchangerate.bean.ExChangeMultipleItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EX_CHANGE_MULTIPLE_ITEM".
*/
public class ExChangeMultipleItemDao extends AbstractDao<ExChangeMultipleItem, Long> {

    public static final String TABLENAME = "EX_CHANGE_MULTIPLE_ITEM";

    /**
     * Properties of entity ExChangeMultipleItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemType = new Property(1, int.class, "itemType", false, "ITEM_TYPE");
        public final static Property Curno = new Property(2, String.class, "curno", false, "CURNO");
        public final static Property Cname = new Property(3, String.class, "cname", false, "CNAME");
        public final static Property Ename = new Property(4, String.class, "ename", false, "ENAME");
        public final static Property Num = new Property(5, String.class, "num", false, "NUM");
        public final static Property Middle = new Property(6, String.class, "middle", false, "MIDDLE");
        public final static Property Update = new Property(7, String.class, "update", false, "UPDATE");
        public final static Property SsRote = new Property(8, String.class, "ssRote", false, "SS_ROTE");
        public final static Property Quyu = new Property(9, String.class, "quyu", false, "QUYU");
    }


    public ExChangeMultipleItemDao(DaoConfig config) {
        super(config);
    }
    
    public ExChangeMultipleItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EX_CHANGE_MULTIPLE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 1: itemType
                "\"CURNO\" TEXT," + // 2: curno
                "\"CNAME\" TEXT," + // 3: cname
                "\"ENAME\" TEXT," + // 4: ename
                "\"NUM\" TEXT," + // 5: num
                "\"MIDDLE\" TEXT," + // 6: middle
                "\"UPDATE\" TEXT," + // 7: update
                "\"SS_ROTE\" TEXT," + // 8: ssRote
                "\"QUYU\" TEXT);"); // 9: quyu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EX_CHANGE_MULTIPLE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExChangeMultipleItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getItemType());
 
        String curno = entity.getCurno();
        if (curno != null) {
            stmt.bindString(3, curno);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(4, cname);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(5, ename);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String middle = entity.getMiddle();
        if (middle != null) {
            stmt.bindString(7, middle);
        }
 
        String update = entity.getUpdate();
        if (update != null) {
            stmt.bindString(8, update);
        }
 
        String ssRote = entity.getSsRote();
        if (ssRote != null) {
            stmt.bindString(9, ssRote);
        }
 
        String quyu = entity.getQuyu();
        if (quyu != null) {
            stmt.bindString(10, quyu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExChangeMultipleItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getItemType());
 
        String curno = entity.getCurno();
        if (curno != null) {
            stmt.bindString(3, curno);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(4, cname);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(5, ename);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String middle = entity.getMiddle();
        if (middle != null) {
            stmt.bindString(7, middle);
        }
 
        String update = entity.getUpdate();
        if (update != null) {
            stmt.bindString(8, update);
        }
 
        String ssRote = entity.getSsRote();
        if (ssRote != null) {
            stmt.bindString(9, ssRote);
        }
 
        String quyu = entity.getQuyu();
        if (quyu != null) {
            stmt.bindString(10, quyu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExChangeMultipleItem readEntity(Cursor cursor, int offset) {
        ExChangeMultipleItem entity = new ExChangeMultipleItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // itemType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // curno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ename
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // middle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // update
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ssRote
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // quyu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExChangeMultipleItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemType(cursor.getInt(offset + 1));
        entity.setCurno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMiddle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSsRote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQuyu(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExChangeMultipleItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExChangeMultipleItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExChangeMultipleItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
